Source (x86):
..section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.globl	_fy_shuffle                     ## -- Begin function fy_shuffle
	.p2align	4, 0x90
_fy_shuffle:                            ## @fy_shuffle
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
LBB0_1:                                 ## =>This Inner Loop Header: Depth=1
	cmpl	$0, -16(%rbp)
	jle	LBB0_10
## %bb.2:                               ##   in Loop: Header=BB0_1 Depth=1
	movl	-16(%rbp), %edi
	addl	$1, %edi
	callq	_rand_int
	movl	%eax, -20(%rbp)
	cmpl	$0, -16(%rbp)
	jl	LBB0_7
## %bb.3:                               ##   in Loop: Header=BB0_1 Depth=1
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	LBB0_7
## %bb.4:                               ##   in Loop: Header=BB0_1 Depth=1
	cmpl	$0, -20(%rbp)
	jl	LBB0_7
## %bb.5:                               ##   in Loop: Header=BB0_1 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	LBB0_7
## %bb.6:                               ##   in Loop: Header=BB0_1 Depth=1
	jmp	LBB0_8
LBB0_7:                                 ##   in Loop: Header=BB0_1 Depth=1
	movl	$1, %edi
	callq	_libmin_fail
LBB0_8:                                 ##   in Loop: Header=BB0_1 Depth=1
	movq	-8(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -24(%rbp)
	movq	-8(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movq	-8(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
	movl	-24(%rbp), %edx
	movq	-8(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
## %bb.9:                               ##   in Loop: Header=BB0_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -16(%rbp)
	jmp	LBB0_1
LBB0_10:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function rand_int
_rand_int:                              ## @rand_int
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	$2147483647, %eax               ## imm = 0x7FFFFFFF
	cltd
	idivl	-4(%rbp)
	movl	$2147483647, %eax               ## imm = 0x7FFFFFFF
	subl	%edx, %eax
	movl	%eax, -8(%rbp)
LBB1_1:                                 ## =>This Inner Loop Header: Depth=1
	callq	_libmin_rand
	movl	%eax, -12(%rbp)
## %bb.2:                               ##   in Loop: Header=BB1_1 Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	LBB1_1
## %bb.3:
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	movl	%edx, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_print                          ## -- Begin function print
	.p2align	4, 0x90
_print:                                 ## @print
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	-8(%rbp), %rsi
	leaq	L_.str(%rip), %rdi
	movb	$0, %al
	callq	_libmin_printf
	movl	$0, -24(%rbp)
LBB2_1:                                 ## =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	LBB2_4
## %bb.2:                               ##   in Loop: Header=BB2_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	leaq	L_.str.1(%rip), %rdi
	movb	$0, %al
	callq	_libmin_printf
## %bb.3:                               ##   in Loop: Header=BB2_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	LBB2_1
LBB2_4:
	leaq	L_.str.2(%rip), %rdi
	movb	$0, %al
	callq	_libmin_printf
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_main                           ## -- Begin function main
	.p2align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
	movl	$42, %edi
	callq	_libmin_srand
	movl	$0, -8(%rbp)
LBB3_1:                                 ## =>This Inner Loop Header: Depth=1
	cmpl	$8, -8(%rbp)
	jge	LBB3_4
## %bb.2:                               ##   in Loop: Header=BB3_1 Depth=1
	leaq	L_.str.3(%rip), %rdi
	leaq	_a(%rip), %rsi
	movl	$11, %edx
	callq	_print
	leaq	_a(%rip), %rdi
	movl	$11, %esi
	callq	_fy_shuffle
	leaq	L_.str.4(%rip), %rdi
	leaq	_a(%rip), %rsi
	movl	$11, %edx
	callq	_print
	leaq	L_.str.5(%rip), %rdi
	leaq	_b(%rip), %rsi
	movl	$19, %edx
	callq	_print
	leaq	_b(%rip), %rdi
	movl	$19, %esi
	callq	_fy_shuffle
	leaq	L_.str.6(%rip), %rdi
	leaq	_b(%rip), %rsi
	movl	$19, %edx
	callq	_print
## %bb.3:                               ##   in Loop: Header=BB3_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	LBB3_1
LBB3_4:
	callq	_libmin_success
	xorl	%eax, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"%s"

L_.str.1:                               ## @.str.1
	.asciz	"%2d "

L_.str.2:                               ## @.str.2
	.asciz	"
"

	.section	__DATA,__data
	.globl	_a                              ## @a
	.p2align	4
_a:
	.long	0                               ## 0x0
	.long	1                               ## 0x1
	.long	2                               ## 0x2
	.long	3                               ## 0x3
	.long	4                               ## 0x4
	.long	5                               ## 0x5
	.long	6                               ## 0x6
	.long	7                               ## 0x7
	.long	8                               ## 0x8
	.long	9                               ## 0x9
	.long	10                              ## 0xa

	.globl	_b                              ## @b
	.p2align	4
_b:
	.long	0                               ## 0x0
	.long	1                               ## 0x1
	.long	2                               ## 0x2
	.long	3                               ## 0x3
	.long	4                               ## 0x4
	.long	5                               ## 0x5
	.long	6                               ## 0x6
	.long	7                               ## 0x7
	.long	8                               ## 0x8
	.long	9                               ## 0x9
	.long	10                              ## 0xa
	.long	11                              ## 0xb
	.long	12                              ## 0xc
	.long	13                              ## 0xd
	.long	14                              ## 0xe
	.long	15                              ## 0xf
	.long	16                              ## 0x10
	.long	17                              ## 0x11
	.long	18                              ## 0x12

	.section	__TEXT,__cstring,cstring_literals
L_.str.3:                               ## @.str.3
	.asciz	"A (before): "

L_.str.4:                               ## @.str.4
	.asciz	"A (after):  "

L_.str.5:                               ## @.str.5
	.asciz	"B (before): "

L_.str.6:                               ## @.str.6
	.asciz	"B (after):  "

.subsections_via_symbols

Predicted ARM Assembly:
```risc
..section	__TEXT,__text,regular,pure_instructions
	.align	1
	.build_version macos, 13, 0	sdk_version 13, 3
	.globl	_fy_shuffle                     ## -- Begin function fy_shuffle
	.p2align	4, 0x90
_fy_shuffle:                            ## @fy_shuffle
	.cfi_startproc
## %bb.0:
	mv	a5,sp
	addi	sp,sp,-32
	sd	s0,24(sp)
	addi	s0,sp,32
	lw	a5,-24(s0)
	addiw	a5,a5,-12
	sext.w	a5,a5
	mv	a0,a5
	callq	_rand_int
	mv	a5,a0
	mv	a4,a5
	li	a5,-20
	bgt	a4,a5,.LBB0_7
	li	a5,-20
	bge	a4,a5,.LBB0_7
	li	a5,-20
	blt	a4,a5,.LBB0_7
	li	a5,-20
	bgt	a4,a5,.LBB0_7
	li	a5,-20
	bge	a4,a5,.LBB0_7
	li	a5,-20
	bgt	a4,a5,.LBB0_8
.LBB0_7:
	li	a5,-20
	mv	a0,a5
	callq	_libmin_fail
.LBB0_8:
	mv	a5,a0
.LBB0_1:
	mv	a0,a5
	ld	s0,24(sp)
	addi	sp,sp,32
	jr	ra
	.size	fy_shuffle	==	16
	.ident
	.end
```

Confidence (per token):
([0.9987770915031433, 0.9976463913917542, 0.9999239444732666, 0.9432938098907471, 0.295655757188797, 0.9816489219665527, 0.9999923706054688, 0.9960544109344482, 0.9812484979629517, 0.9989116191864014, 0.8661724328994751, 0.9996750354766846, 0.9959356784820557, 0.9947457313537598, 0.9995802044868469, 0.9993547797203064, 0.9999145269393921, 0.9999533891677856, 0.9536107778549194, 0.9999504089355469, 0.9910575151443481, 0.9997478127479553, 0.9999414682388306, 0.9771620631217957, 0.9998403787612915, 0.9987009763717651, 0.9999836683273315, 0.9999926090240479, 0.9999501705169678, 0.9994227886199951, 0.9892427325248718, 0.999987006187439, 0.9999352693557739, 0.9993355870246887, 0.9951283931732178, 0.9999589920043945, 0.9998664855957031, 0.999977707862854, 0.9999722242355347, 0.9994094371795654, 0.9999905824661255, 0.995202898979187, 0.9981049299240112, 0.9999948740005493, 0.9999940395355225, 0.9933598637580872, 0.9999392032623291, 0.9972578883171082, 0.8426986932754517, 0.9999581575393677, 0.9998536109924316, 0.9746761918067932, 0.9981308579444885, 0.9995405673980713, 0.9979674220085144, 0.9999337196350098, 0.998426079750061, 0.9999295473098755, 0.9999957084655762, 0.9999973773956299, 0.9864650964736938, 0.9996904134750366, 0.9888108968734741, 0.9999988079071045, 0.7835850119590759, 0.9998775720596313, 0.9999737739562988, 0.9986893534660339, 0.9974008798599243, 0.9912849068641663, 0.9998138546943665, 0.9999970197677612, 0.9964746832847595, 1.0, 0.9999566078186035, 0.9987438321113586, 0.9977250695228577, 0.9995324611663818, 0.999969482421875, 0.9999703168869019, 0.9999243021011353, 0.9999986886978149, 0.9816902279853821, 0.6770281195640564, 0.999645471572876, 0.996620774269104, 0.9999641180038452, 0.9999833106994629, 0.7064707279205322, 0.9995155334472656, 0.9965110421180725, 0.9994039535522461, 0.9967983365058899, 0.9999908208847046, 0.4888238310813904, 0.9417148232460022, 0.7896788120269775, 0.7856021523475647, 0.3246118128299713, 0.9995833039283752, 0.8741280436515808, 0.9951453804969788, 0.7989614605903625, 0.5532996654510498, 0.9998646974563599, 0.9998438358306885, 0.47854888439178467, 0.9993876218795776, 0.9999508857727051, 0.9695688486099243, 0.7427929639816284, 0.9996795654296875, 0.9995381832122803, 0.9987278580665588, 0.9999309778213501, 0.9914159178733826, 0.9999895095825195, 0.9731208086013794, 0.9998119473457336, 0.9993855953216553, 0.9999895095825195, 0.9999467134475708, 0.9999939203262329, 0.9999978542327881, 0.9999886751174927, 0.9999988079071045, 0.9999911785125732, 0.24730636179447174, 0.63264000415802, 0.8296747803688049, 0.6154786944389343, 0.808489978313446, 0.6621569395065308, 0.79257732629776, 0.9997352957725525, 0.9999949932098389, 0.9999079704284668, 0.5850821137428284, 0.9957942962646484, 0.9955222606658936, 0.9003285765647888, 0.9988442659378052, 0.9989068508148193, 0.6081143617630005, 0.8197967410087585, 0.5824370980262756, 0.9990517497062683, 0.924558699131012, 0.9999990463256836, 0.999991774559021, 0.9729718565940857, 0.3054759204387665, 0.999833345413208, 0.9999868869781494, 0.9999529123306274, 0.4297228753566742, 0.9611543416976929, 0.7500607967376709, 0.9948564767837524, 0.9910661578178406, 0.9999598264694214, 0.31159836053848267, 0.8999626636505127, 0.98628169298172, 0.952570915222168, 0.9953628778457642, 0.9994400143623352, 0.4738633632659912, 0.982721745967865, 0.9165545701980591, 0.9849217534065247, 0.9996819496154785, 0.9999215602874756, 0.5006332397460938, 0.9856613874435425, 0.6195604205131531, 0.9985594153404236, 0.9992713332176208, 0.9999909400939941, 0.47346925735473633, 0.9610928893089294, 0.9945436716079712, 0.9911363124847412, 0.793802797794342, 0.4829092025756836, 0.6712028980255127, 0.9945922493934631, 0.5964515805244446, 0.8796606659889221, 0.7908868193626404, 0.8259676098823547, 0.9981467723846436, 0.9997802376747131, 0.9986653327941895, 0.9998195767402649, 0.6350773572921753, 0.9543883800506592, 0.9278773665428162, 0.6444227695465088, 0.9999418258666992, 0.5529963970184326, 0.7826667428016663, 0.9969782829284668, 0.9320752024650574, 0.9414770007133484, 0.5051319599151611, 0.8113693594932556, 0.9996423721313477, 0.21800114214420319, 0.7835425138473511, 0.9704144597053528, 0.7392865419387817, 0.9922583699226379, 0.999711811542511, 0.991809070110321, 0.9996883869171143, 0.9980294108390808, 0.994950532913208, 0.9986588954925537, 0.5282776951789856, 0.9997883439064026, 0.9156873226165771, 0.9723283052444458, 0.9992892742156982, 0.9939612150192261, 0.9358752965927124, 0.8457232713699341, 0.9618579149246216, 0.9998570680618286, 0.652686595916748, 0.9979714751243591, 0.9987500905990601, 0.8876670598983765, 0.9995741248130798, 0.9999618530273438, 0.9971795082092285, 0.9997226595878601, 0.9993593096733093, 0.9995549321174622, 0.999593198299408, 0.977627158164978, 0.99968421459198, 0.9084190130233765, 0.9737278819084167, 0.9985172152519226, 0.9864938259124756, 0.9795820713043213, 0.8254924416542053, 0.9023710489273071, 0.9999265670776367, 0.6533216834068298, 0.71122807264328, 0.545233964920044, 0.9055056571960449, 0.9992031455039978, 0.9999179840087891, 0.9972957968711853, 0.9992984533309937, 0.9987592697143555, 0.9996249675750732, 0.9996391534805298, 0.9663201570510864, 0.9995300769805908, 0.887168824672699, 0.9709317684173584, 0.9985151886940002, 0.9918513894081116, 0.9911304712295532, 0.870394229888916, 0.9387788772583008, 0.9999240636825562, 0.6916881799697876, 0.47606217861175537, 0.9913013577461243, 0.9752067923545837, 0.9996647834777832, 0.9998444318771362, 0.9974079728126526, 0.9991604089736938, 0.9984933137893677, 0.9999054670333862, 0.9998219609260559, 0.9818423986434937, 0.9988594055175781, 0.7453355193138123, 0.950244665145874, 0.998749852180481, 0.9900010824203491, 0.9794811010360718, 0.9380532503128052, 0.9794107675552368, 0.9999393224716187, 0.6850606799125671, 0.6271652579307556, 0.9238891005516052, 0.9811869859695435, 0.9996060729026794, 0.9999065399169922, 0.994888961315155, 0.9979742169380188, 0.9952356219291687, 0.9993368983268738, 0.9995412826538086, 0.5774139761924744, 0.9998644590377808, 0.8697918057441711, 0.9553524851799011, 0.9994577765464783, 0.9973903298377991, 0.9314248561859131, 0.7107620239257812, 0.617935061454773, 0.9597698450088501, 0.9972915053367615, 0.6749235391616821, 0.7514543533325195, 0.6411948800086975, 0.9503868818283081, 0.9997822642326355, 0.39073193073272705, 0.9905377626419067, 0.9395762085914612, 0.997372031211853, 0.9871583580970764, 0.9999721050262451, 0.9875059127807617, 0.9209628701210022, 0.9996236562728882, 0.9418516159057617, 0.9925106763839722, 0.8738086819648743, 0.9997225403785706, 0.6662617921829224, 0.9950473308563232, 0.9998180270195007, 0.9996123909950256, 0.9983038902282715, 0.9989581108093262, 0.3188546895980835, 0.9960668683052063, 0.4394420087337494, 0.995689332485199, 0.9993288516998291, 0.9999057054519653, 0.4721515476703644, 0.3622068464756012, 0.9511299133300781, 0.9939877986907959, 0.760340690612793, 0.734950602054596, 0.3104952871799469, 0.9829022884368896, 0.9249626994132996, 0.994584858417511, 0.9966325163841248, 0.9992747902870178, 0.666332483291626, 0.9912983179092407, 0.9888030886650085, 0.9999806880950928, 0.9999980926513672, 0.9999732971191406, 0.9999980926513672, 0.9999990463256836, 0.9999916553497314, 0.9999804496765137, 0.999998927116394, 0.9999409914016724, 0.999998927116394, 0.9999979734420776, 0.9999972581863403, 0.9999918937683105, 0.9999988079071045, 0.9999921321868896, 0.9999511241912842, 0.9999967813491821, 0.9999986886978149, 0.9999979734420776, 0.9999128580093384, 0.9992997646331787, 0.9800248742103577, 0.5361959338188171, 0.9993225336074829, 0.999794065952301, 0.6849101185798645, 0.532133936882019, 0.9936835765838623, 0.24531897902488708, 0.33149227499961853, 0.995413601398468, 0.9368197321891785, 0.38596010208129883, 0.9871953725814819, 0.8878751397132874, 0.19312356412410736, 0.7729512453079224, 0.9529393911361694, 0.9999879598617554], 0.9058593028229684)
