# Generated from UniAssembly.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,21,252,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,1,0,1,0,4,0,46,8,0,11,0,12,0,47,1,0,1,0,4,0,52,8,0,
        11,0,12,0,53,1,0,1,0,4,0,58,8,0,11,0,12,0,59,1,0,1,0,4,0,64,8,0,
        11,0,12,0,65,1,0,1,0,4,0,70,8,0,11,0,12,0,71,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,
        94,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,118,8,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,154,8,0,3,
        0,156,8,0,1,1,1,1,5,1,160,8,1,10,1,12,1,163,9,1,1,2,3,2,166,8,2,
        1,2,1,2,5,2,170,8,2,10,2,12,2,173,9,2,1,3,1,3,4,3,177,8,3,11,3,12,
        3,178,1,3,1,3,4,3,183,8,3,11,3,12,3,184,3,3,187,8,3,1,4,1,4,1,4,
        1,4,1,4,4,4,194,8,4,11,4,12,4,195,1,5,3,5,199,8,5,1,5,4,5,202,8,
        5,11,5,12,5,203,1,6,1,6,1,6,1,6,5,6,210,8,6,10,6,12,6,213,9,6,1,
        6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
        1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,3,19,
        242,8,19,1,19,1,19,1,20,4,20,247,8,20,11,20,12,20,248,1,20,1,20,
        0,0,21,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,1,0,8,1,0,
        48,57,1,0,56,57,1,0,48,53,4,0,37,37,64,90,95,95,97,122,5,0,45,46,
        48,57,64,90,95,95,97,122,3,0,65,90,95,95,97,122,3,0,10,10,13,13,
        34,34,2,0,9,9,32,32,309,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,1,155,1,0,0,0,3,157,1,0,0,0,5,
        165,1,0,0,0,7,186,1,0,0,0,9,188,1,0,0,0,11,198,1,0,0,0,13,205,1,
        0,0,0,15,216,1,0,0,0,17,218,1,0,0,0,19,220,1,0,0,0,21,222,1,0,0,
        0,23,224,1,0,0,0,25,226,1,0,0,0,27,228,1,0,0,0,29,230,1,0,0,0,31,
        232,1,0,0,0,33,234,1,0,0,0,35,236,1,0,0,0,37,238,1,0,0,0,39,241,
        1,0,0,0,41,246,1,0,0,0,43,45,5,120,0,0,44,46,7,0,0,0,45,44,1,0,0,
        0,46,47,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,156,1,0,0,0,49,51,
        5,114,0,0,50,52,7,0,0,0,51,50,1,0,0,0,52,53,1,0,0,0,53,51,1,0,0,
        0,53,54,1,0,0,0,54,156,1,0,0,0,55,57,5,97,0,0,56,58,7,0,0,0,57,56,
        1,0,0,0,58,59,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,156,1,0,0,0,
        61,63,5,115,0,0,62,64,7,0,0,0,63,62,1,0,0,0,64,65,1,0,0,0,65,63,
        1,0,0,0,65,66,1,0,0,0,66,156,1,0,0,0,67,69,5,119,0,0,68,70,7,0,0,
        0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,156,
        1,0,0,0,73,74,5,115,0,0,74,156,5,112,0,0,75,153,5,37,0,0,76,93,5,
        114,0,0,77,78,5,97,0,0,78,94,5,120,0,0,79,80,5,98,0,0,80,94,5,120,
        0,0,81,82,5,99,0,0,82,94,5,120,0,0,83,84,5,100,0,0,84,94,5,120,0,
        0,85,86,5,115,0,0,86,94,5,105,0,0,87,88,5,100,0,0,88,94,5,105,0,
        0,89,90,5,115,0,0,90,94,5,112,0,0,91,92,5,98,0,0,92,94,5,112,0,0,
        93,77,1,0,0,0,93,79,1,0,0,0,93,81,1,0,0,0,93,83,1,0,0,0,93,85,1,
        0,0,0,93,87,1,0,0,0,93,89,1,0,0,0,93,91,1,0,0,0,94,154,1,0,0,0,95,
        96,5,114,0,0,96,154,7,1,0,0,97,98,5,114,0,0,98,99,5,49,0,0,99,154,
        7,2,0,0,100,117,5,101,0,0,101,102,5,97,0,0,102,118,5,120,0,0,103,
        104,5,98,0,0,104,118,5,120,0,0,105,106,5,99,0,0,106,118,5,120,0,
        0,107,108,5,100,0,0,108,118,5,120,0,0,109,110,5,115,0,0,110,118,
        5,105,0,0,111,112,5,100,0,0,112,118,5,105,0,0,113,114,5,115,0,0,
        114,118,5,112,0,0,115,116,5,98,0,0,116,118,5,112,0,0,117,101,1,0,
        0,0,117,103,1,0,0,0,117,105,1,0,0,0,117,107,1,0,0,0,117,109,1,0,
        0,0,117,111,1,0,0,0,117,113,1,0,0,0,117,115,1,0,0,0,118,154,1,0,
        0,0,119,120,5,97,0,0,120,154,5,120,0,0,121,122,5,98,0,0,122,154,
        5,120,0,0,123,124,5,99,0,0,124,154,5,120,0,0,125,126,5,100,0,0,126,
        154,5,120,0,0,127,128,5,115,0,0,128,154,5,105,0,0,129,130,5,100,
        0,0,130,154,5,105,0,0,131,132,5,115,0,0,132,154,5,112,0,0,133,134,
        5,98,0,0,134,154,5,112,0,0,135,136,5,97,0,0,136,154,5,108,0,0,137,
        138,5,98,0,0,138,154,5,108,0,0,139,140,5,99,0,0,140,154,5,108,0,
        0,141,142,5,100,0,0,142,154,5,108,0,0,143,144,5,97,0,0,144,154,5,
        104,0,0,145,146,5,98,0,0,146,154,5,104,0,0,147,148,5,99,0,0,148,
        154,5,104,0,0,149,150,5,100,0,0,150,154,5,104,0,0,151,152,5,102,
        0,0,152,154,5,115,0,0,153,76,1,0,0,0,153,95,1,0,0,0,153,97,1,0,0,
        0,153,100,1,0,0,0,153,119,1,0,0,0,153,121,1,0,0,0,153,123,1,0,0,
        0,153,125,1,0,0,0,153,127,1,0,0,0,153,129,1,0,0,0,153,131,1,0,0,
        0,153,133,1,0,0,0,153,135,1,0,0,0,153,137,1,0,0,0,153,139,1,0,0,
        0,153,141,1,0,0,0,153,143,1,0,0,0,153,145,1,0,0,0,153,147,1,0,0,
        0,153,149,1,0,0,0,153,151,1,0,0,0,154,156,1,0,0,0,155,43,1,0,0,0,
        155,49,1,0,0,0,155,55,1,0,0,0,155,61,1,0,0,0,155,67,1,0,0,0,155,
        73,1,0,0,0,155,75,1,0,0,0,156,2,1,0,0,0,157,161,7,3,0,0,158,160,
        7,4,0,0,159,158,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,
        1,0,0,0,162,4,1,0,0,0,163,161,1,0,0,0,164,166,5,46,0,0,165,164,1,
        0,0,0,165,166,1,0,0,0,166,167,1,0,0,0,167,171,7,5,0,0,168,170,7,
        4,0,0,169,168,1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,
        0,0,0,172,6,1,0,0,0,173,171,1,0,0,0,174,176,5,35,0,0,175,177,7,0,
        0,0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,1,0,0,0,178,179,1,0,
        0,0,179,187,1,0,0,0,180,182,5,36,0,0,181,183,7,0,0,0,182,181,1,0,
        0,0,183,184,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,187,1,0,
        0,0,186,174,1,0,0,0,186,180,1,0,0,0,187,8,1,0,0,0,188,189,5,35,0,
        0,189,190,5,48,0,0,190,191,5,120,0,0,191,193,1,0,0,0,192,194,7,0,
        0,0,193,192,1,0,0,0,194,195,1,0,0,0,195,193,1,0,0,0,195,196,1,0,
        0,0,196,10,1,0,0,0,197,199,5,45,0,0,198,197,1,0,0,0,198,199,1,0,
        0,0,199,201,1,0,0,0,200,202,7,0,0,0,201,200,1,0,0,0,202,203,1,0,
        0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,12,1,0,0,0,205,211,5,34,
        0,0,206,210,8,6,0,0,207,208,5,92,0,0,208,210,9,0,0,0,209,206,1,0,
        0,0,209,207,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,
        0,0,212,214,1,0,0,0,213,211,1,0,0,0,214,215,5,34,0,0,215,14,1,0,
        0,0,216,217,5,58,0,0,217,16,1,0,0,0,218,219,5,44,0,0,219,18,1,0,
        0,0,220,221,5,40,0,0,221,20,1,0,0,0,222,223,5,41,0,0,223,22,1,0,
        0,0,224,225,5,91,0,0,225,24,1,0,0,0,226,227,5,93,0,0,227,26,1,0,
        0,0,228,229,5,35,0,0,229,28,1,0,0,0,230,231,5,33,0,0,231,30,1,0,
        0,0,232,233,5,46,0,0,233,32,1,0,0,0,234,235,5,45,0,0,235,34,1,0,
        0,0,236,237,5,123,0,0,237,36,1,0,0,0,238,239,5,125,0,0,239,38,1,
        0,0,0,240,242,5,13,0,0,241,240,1,0,0,0,241,242,1,0,0,0,242,243,1,
        0,0,0,243,244,5,10,0,0,244,40,1,0,0,0,245,247,7,7,0,0,246,245,1,
        0,0,0,247,248,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,250,1,
        0,0,0,250,251,6,20,0,0,251,42,1,0,0,0,23,0,47,53,59,65,71,93,117,
        153,155,161,165,171,178,184,186,195,198,203,209,211,241,248,1,6,
        0,0
    ]

class UniAssemblyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    REGISTER = 1
    SYMBOL = 2
    DOT_SYMBOL = 3
    IMMEDIATE = 4
    BINARY_IMMEDIATE = 5
    NUMBER = 6
    STRING = 7
    COLON = 8
    COMMA = 9
    LPAREN = 10
    RPAREN = 11
    LBRACK = 12
    RBRACK = 13
    HASH = 14
    BANG = 15
    DOT = 16
    MINUS = 17
    LCURLY = 18
    RCURLY = 19
    NEWLINE = 20
    WS = 21

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "','", "'('", "')'", "'['", "']'", "'#'", "'!'", "'.'", 
            "'-'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "REGISTER", "SYMBOL", "DOT_SYMBOL", "IMMEDIATE", "BINARY_IMMEDIATE", 
            "NUMBER", "STRING", "COLON", "COMMA", "LPAREN", "RPAREN", "LBRACK", 
            "RBRACK", "HASH", "BANG", "DOT", "MINUS", "LCURLY", "RCURLY", 
            "NEWLINE", "WS" ]

    ruleNames = [ "REGISTER", "SYMBOL", "DOT_SYMBOL", "IMMEDIATE", "BINARY_IMMEDIATE", 
                  "NUMBER", "STRING", "COLON", "COMMA", "LPAREN", "RPAREN", 
                  "LBRACK", "RBRACK", "HASH", "BANG", "DOT", "MINUS", "LCURLY", 
                  "RCURLY", "NEWLINE", "WS" ]

    grammarFileName = "UniAssembly.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


